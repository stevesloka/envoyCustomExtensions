name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  pull_request:

env:
  PUBLISH_IMAGE_NAME: docker.pkg.github.com/stevesloka/envoy-custom-extensions/envoy.contour

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  build_envoy:
    runs-on: ubuntu-latest

    steps:
    
      - uses: actions/checkout@v2
    
      - name: Build Envoy
        run: |
          git clone https://github.com/envoyproxy/envoy.git && \
            cd envoy && \
            git fetch && \
            git checkout v1.16.1
          
          ./ci/run_envoy_docker.sh './ci/do_ci.sh bazel.release.server_only'
          mkdir -p build_release_stripped
          cp /tmp/envoy-docker-build/envoy/source/exe/envoy build_release_stripped/envoy

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure build_envoy job passes before pushing image.
    needs: build_envoy

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run:  |
          cd envoy
          docker build -f ci/Dockerfile-envoy -t $PUBLISH_IMAGE_NAME .

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
 
      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$PUBLISH_IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $PUBLISH_IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
